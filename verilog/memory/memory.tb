//-----------------------------------------------------------------------------
// Test memory
// Philip R Brenan at appaapps dot com, Appa Apps Ltd Inc., 2023
//------------------------------------------------------------------------------
module MemoryTB();                                                              // Mmeory test bench
  parameter integer ADDRESS_BITS =  8;                                          // Number of memory elements for both arrays and elements
  parameter integer INDEX_BITS   =  3;                                          // Log2 width of an element in bits
  parameter integer DATA_BITS    = 16;                                          // Log2 width of an element in bits

  reg                   clock;                                                  // Clock to drive array operations
  reg [7:0]             action;                                                 // Operation to be performed on array
  reg [ADDRESS_BITS -1:0] array, a1, a2;                                        // The number of the array to work on
  reg [INDEX_BITS -1:0] index;                                                  // Index within array
  reg [DATA_BITS  -1:0] in;                                                     // Input data
  reg [DATA_BITS  -1:0] out;                                                    // Output data
  reg [31           :0] error;                                                  // Error code

  `include "tests.sv"                                                           // Test routines

  Memory #(ADDRESS_BITS, INDEX_BITS, DATA_BITS) m                               // Create memory
   (.clock(clock),
    .action(action),
    .array(array),
    .index(index),
    .in(in),
    .out(out),
    .error(error)
   );

  task step();
    begin
       #1 clock = ~ clock;
    end
  endtask

  task allocateArray();
    begin
       action = `Alloc; step(); array = out;
    end
  endtask

  task dump();
    begin
       action = `Dump; step();
    end
  endtask

  initial begin                                                                 // Test the circular buffer
    clock = 0;                     action = `Reset; step();

    allocateArray();
    index = 0; in = 11; action = `Write;      step();
    index = 1; in = 22;                        step();
    index = 2; in = 33;                        step();
    index = 3; in = 44;                        step();

    index = 2;          action = `Read;       step();  ok(out == 33,     "Read");
                        action = `Size;       step();  ok(out == 4,      "Size");
               in = 22; action = `Index;      step();  ok(out == 2,      "Index");
                        action = `Less;       step();  ok(out == 1,      "Less");
                        action = `Greater;    step();  ok(out == 2,      "Greater");
                        action = `Dec;        step();
                        action = `Size;       step();  ok(out == 3,      "Dec Size");
                        action = `Inc;        step();
                        action = `Size;       step();  ok(out == 4,      "Inc Size");
                        action = `Pop;        step();  ok(out == 44,     "Pop");
                        action = `Size;       step();  ok(out == 3,      "Pop Size");

               in=55;   action = `Push;       step();
    index = 3;          action = `Read;       step();  ok(out == 55,     "Read push");

                        action = `Size;       step();  ok(out == 4,      "Push Size");
    index = 0;          action = `Read;       step();  ok(out == 11,     "PreUp 0");
    index = 1;          action = `Read;       step();  ok(out == 22,     "PreUp 1");
    index = 2;          action = `Read;       step();  ok(out == 33,     "PreUp 2");
    index = 3;          action = `Read;       step();  ok(out == 55,     "PreUp 3");

    index = 0; in = 99; action = `Up;         step();
                        action = `Size;       step();  ok(out ==  5,     "Up Size0");
                        action = `Read;       step();  ok(out == 99,     "Up 01");
    index = 1;          action = `Read;       step();  ok(out == 11,     "Up 02");
    index = 2;          action = `Read;       step();  ok(out == 22,     "Up 03");
    index = 3;          action = `Read;       step();  ok(out == 33,     "Up 04");
    index = 4;          action = `Read;       step();  ok(out == 55,     "Up 05");

    index = 1; in = 88; action = `Up;         step();
                        action = `Size;       step();  ok(out ==  6,     "Up Size1");
    index = 0;          action = `Read;       step();  ok(out == 99,     "Up 11");
    index = 1;          action = `Read;       step();  ok(out == 88,     "Up 12");
    index = 2;          action = `Read;       step();  ok(out == 11,     "Up 13");
    index = 3;          action = `Read;       step();  ok(out == 22,     "Up 14");
    index = 4;          action = `Read;       step();  ok(out == 33,     "Up 15");
    index = 5;          action = `Read;       step();  ok(out == 55,     "Up 16");


    a1 = array; allocateArray(); a2 = array;
    index = 0; in = 60; action = `Write;      step();
    index = 1; in = 61;                        step();
    index = 2; in = 62;                        step();
    index = 3; in = 63;                        step();
    index = 4; in = 64;                        step();
    index = 5; in = 65;                        step();
    index = 6; in = 66;                        step();
    index = 7; in = 67;                        step();
                        action = `Size;       step();  ok(out == 8,      "Size MoveLong1");
    array = a1;
    index = 2;          action = `Long1;      step();
    array = a2;
    index = 3; in = 2;  action = `Long2;      step();

    array = a2;
                        action = `Size;       step();  ok(out ==  8,     "Size MoveLong2");
    index = 0;          action = `Read;       step();  ok(out == 60,     "ML 0");
    index = 1;                                 step();  ok(out == 61,     "ML 1");
    index = 2;                                 step();  ok(out == 62,     "ML 2");
    index = 3;                                 step();  ok(out == 11,     "ML 3");
    index = 4;                                 step();  ok(out == 22,     "ML 4");
    index = 5;                                 step();  ok(out == 65,     "ML 5");
    index = 6;                                 step();  ok(out == 66,     "ML 6");
    index = 7;                                 step();  ok(out == 67,     "ML 7");

    array = a2; in = 2; action = `Resize;     step();
                        action = `Size;       step();  ok(out ==  2,     "Resize1");
    array = a2; in =22; action = `Resize;     step();  ok(error == 10000144, "Resize 22");
                        action = `Size;       step();  ok(out ==  2,     "Resize2");

    array = a1;         action = `Free;       step();
    allocateArray();                                    ok(array == a1,   "Reallocate");
                        action = `Size;       step();  ok(out   ==  0,   "Reallocate-Size");
                in =11; action = `Push;       step();
                in =22; action = `Push;       step();
                in =33; action = `Push;       step();
    index = 1;  in = 2; action = `AddAfter;   step();  ok(out == 22,     "Add after");
                        action = `Read;       step();  ok(out == 24,     "Add after 2");
                        action = `Add;        step();  ok(out == 26,     "Add");
                        action = `Subtract;   step();  ok(out == 24,     "Subtract");
                        action = `Write;      step();  ok(out ==  2,     "Write 10");
                in = 2; action = `ShiftLeft;  step();  ok(out ==  8,     "Shift left");
                        action = `ShiftRight; step();  ok(out ==  2,     "Shift right");
                        action = `Not;        step();  ok(out ==  65533, "Not");
                in = 1; action = `Write;      step();  ok(out ==  1,     "Write 11");
                in = 2; action = `Or;         step();  ok(out ==  3,     "Or");
                in = 2; action = `And;        step();  ok(out ==  2,     "And");
                in = 3; action = `Xor;        step();  ok(out ==  1,     "Xor");
                        action = `NotLogical; step();  ok(out ==  0,     "NL0");
                        action = `NotLogical; step();  ok(out ==  1,     "NL1");

    array = 3; index = 0; action = `Read; step(); ok(error == 10000020,  "Read error1");
    array =a2; index = 7; action = `Read; step(); ok(error == 10000022,  "Read error2");
    array = 3;            action = `Push; step(); ok(error == 10000120,  "Push error");
    array = 3;            action = `Pop;  step(); ok(error == 10000130,  "Pop error");


    array = a2;
               in = 8;  action = `Resize; step();
                        action = `Size;   step(); ok(out ==  8, "Shift down size 8");
    index = 3;          action = `Down;   step(); ok(out == 11, "Shift down out");
                        action = `Size;   step(); ok(out ==  7, "Shift down size 7");
                        action = `Read;   step(); ok(out == 22, "Shift down 3");
    index = 2;          action = `Read;   step(); ok(out == 62, "Shift down 2");
//$display("AAAA %d", error);
//dump();
    checkAllTestsPassed(66);
  end
endmodule

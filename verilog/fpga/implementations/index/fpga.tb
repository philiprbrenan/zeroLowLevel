//-----------------------------------------------------------------------------
// Test fpga
// Philip R Brenan at appaapps dot com, Appa Apps Ltd Inc., 2023
//------------------------------------------------------------------------------
module Index_tb();                                                              // Test fpga
  reg[  7:0] key;                                                               // Key to look for
  reg[  7:0] address;                                                           // The address of the block to be indexed
  reg        found,   F[9];                                                     // Key has been found, data output is valid
  reg[  7:0] data,    D[9];                                                     // Data - valid if found is high
  reg[  7:0] next,    N[9];                                                     // Address of next node to search - valid if next is high

  `include "tests.sv"                                                           // Test routines

  Index#(1, 2,4,6, 3,5,7,  1,2,3,4) f                                           // Fpga - address of the block we are instantiating
   (.key    (key),                                                              // Key to look for
    .address(address),                                                          // Address of node to index
    .found  (found),                                                            // Key has been found, data output is valid
    .data   (data),                                                             // Data - valid if found is high
    .next   (next)                                                              // Address of next node to search - valid if next is high
   );

/*                                                                              // A sample tree we wish to query
1|              4
2|      2               6
3|  1       3       5       7   8
*/

  wire      bF = F[1] | F[2] | F[3] | F[4] | F[5] | F[6] | F[7];                // Found in tree
  wire[7:0] bD = D[1] | D[2] | D[3] | D[4] | D[5] | D[6] | D[7];                // Data found in tree
  wire[7:0] bA[8]; assign bA[1] = address; assign bA[2] = N[4]; assign bA[3] = N[2] | N[6];             // Next bus

  Index#(4, 40,-1,-1,  41, -1,-1,  2,6,0,0) f4 (.key(key), .address(bA[1]), .found(F[4]), .data(D[4]), .next(N[4])); // 1
  Index#(2, 20,-1,-1,  21, -1,-1,  1,3,0,0) f2 (.key(key), .address(bA[2]), .found(F[2]), .data(D[2]), .next(N[2])); // 2
  Index#(1, 10,-1,-1,  11, -1,-1,  0,0,0,0) f1 (.key(key), .address(bA[3]), .found(F[1]), .data(D[1]), .next(N[1])); // 3
  Index#(3, 30,-1,-1,  31, -1,-1,  0,0,0,0) f3 (.key(key), .address(bA[3]), .found(F[3]), .data(D[3]), .next(N[3])); // 3
  Index#(5, 50,-1,-1,  51, -1,-1,  0,0,0,0) f5 (.key(key), .address(bA[3]), .found(F[5]), .data(D[5]), .next(N[5])); // 3
  Index#(6, 60,-1,-1,  61, -1,-1,  5,7,0,0) f6 (.key(key), .address(bA[2]), .found(F[6]), .data(D[6]), .next(N[6])); // 2
  Index#(7, 70, 80,-1, 71, 81,-1,  0,0,0,0) f7 (.key(key), .address(bA[3]), .found(F[7]), .data(D[7]), .next(N[7])); // 3

  task p1();
    begin
      $display("key         %d", key);
      $display("key1_equals %d", f.key1_equals);
      $display("key2_equals %d", f.key2_equals);
      $display("key3_equals %d", f.key3_equals);
      $display("found       %d", found);
      $display("data        %d", data);
      $display("next        %d", next);
      //$display("node0       %d", f.node0);
      //$display("node1       %d", f.node1);
      //$display("node2       %d", f.node2);
      //$display("node3       %d", f.node3);
      $display("gt_key1 =   %d", f.gt_key1);
      $display("gt_key2 =   %d", f.gt_key2);
      $display("gt_key3 =   %d", f.gt_key3);
      $display("gt1_4 =     %d", f.gt1_8);
      $display("gt2_4 =     %d", f.gt2_8);
      $display("gt3_4 =     %d", f.gt3_8);
    end
  endtask

  task p2();
    begin
      $display("key       %d", key);
      $display("f*.found  1=%2d 2=%2d 3=%2d 4=%2d 5=%2d 6=%2d 7=%2d", F[1], F[2], F[3], F[4], F[5], F[6], F[7]);
      $display("found     %d", bF);
      $display("data      %d", bD);
      //$display("f1        %d %d e%d %d %d", F[1], D[1], f1.key1_equals, f1.key2_equals, f1.key3_equals);
      //$display("f2        %d %d e%d %d %d", F[2], D[2], f2.key1_equals, f2.key2_equals, f2.key3_equals);
      //$display("f3        %d %d e%d %d %d", F[3], D[3], f3.key1_equals, f3.key2_equals, f3.key3_equals);
      //$display("f4        %d %d e%d %d %d", F[4], D[4], f4.key1_equals, f4.key2_equals, f4.key3_equals);
      //$display("f5        %d %d e%d %d %d k %d %d %d", F[5], D[5], f5.key1_equals, f5.key2_equals, f5.key3_equals, f5.key1_eq_key_1, f5.key1_eq_key_1, f5.key3);
      //$display("f6        %d %d e%d %d %d", F[6], D[6], f6.key1_equals, f6.key2_equals, f6.key3_equals);
      //$display("f7        %d %d e%d %d %d", F[7], D[7], f7.key1_equals, f7.key2_equals, f7.key3_equals);
    end
  endtask

  integer i;

  initial begin                                                                 // Test a single block
    //$dumpfile("test.vcd"); $dumpvars(0, f);
    address = 1;
    key = 2; #1        ok(found == 1, "f2"); ok(next == 0, "n2"); ok(data  == 3, "d2"); ok(f.key1_equals == 1, "k1e2"); ok(f.key2_equals == 0, "k2e2"); ok(f.key3_equals == 0, "k3e2"); ok(f.gt_key1 == 0, "g1e2"); ok(f.gt_key2 == 0, "g2e2"); ok(f.gt_key3 == 0, "g3e2");
    key = 4; #1        ok(found == 1, "f4"); ok(next == 0, "n4"); ok(data  == 5, "d4"); ok(f.key1_equals == 0, "k1e4"); ok(f.key2_equals == 1, "k2e4"); ok(f.key3_equals == 0, "k3e4"); ok(f.gt_key1 == 1, "g1e4"); ok(f.gt_key2 == 0, "g2e4"); ok(f.gt_key3 == 0, "g3e4");
    key = 6; #1        ok(found == 1, "f6"); ok(next == 0, "n6"); ok(data  == 7, "d6"); ok(f.key1_equals == 0, "k1e6"); ok(f.key2_equals == 0, "k2e6"); ok(f.key3_equals == 1, "k3e6"); ok(f.gt_key1 == 1, "g1e6"); ok(f.gt_key2 == 1, "g2e6"); ok(f.gt_key3 == 0, "g3e6");

    key = 1; #1        ok(found == 0, "f1"); ok(next == 1, "n1"); ok(f.key1_equals == 0, "k1e1"); ok(f.key2_equals == 0, "k2e1"); ok(f.key3_equals == 0, "k3e1"); ok(f.gt_key1 == 0, "g1e1"); ok(f.gt_key2 == 0, "g2e1"); ok(f.gt_key3 == 0, "g3e1");
    key = 3; #1        ok(found == 0, "f3"); ok(next == 2, "n3"); ok(f.key1_equals == 0, "k1e3"); ok(f.key2_equals == 0, "k2e3"); ok(f.key3_equals == 0, "k3e3"); ok(f.gt_key1 == 1, "g1e3"); ok(f.gt_key2 == 0, "g2e3"); ok(f.gt_key3 == 0, "g3e3");
    key = 5; #1        ok(found == 0, "f5"); ok(next == 3, "n5"); ok(f.key1_equals == 0, "k1e5"); ok(f.key2_equals == 0, "k2e5"); ok(f.key3_equals == 0, "k3e5"); ok(f.gt_key1 == 1, "g1e5"); ok(f.gt_key2 == 1, "g2e5"); ok(f.gt_key3 == 0, "g3e5");
    key = 7; #1        ok(found == 0, "f7"); ok(next == 4, "n7"); ok(f.key1_equals == 0, "k1e7"); ok(f.key2_equals == 0, "k2e7"); ok(f.key3_equals == 0, "k3e7"); ok(f.gt_key1 == 1, "g1e7"); ok(f.gt_key2 == 1, "g2e7"); ok(f.gt_key3 == 1, "g3e7");


    address = 4;                                                                // Find keys in tree
    #1 key = 10; #1 ok(bF == 1, "f10"); ok(bD == 11, "d11");
    #1 key = 20; #1 ok(bF == 1, "f20"); ok(bD == 21, "d21");
    #1 key = 30; #1 ok(bF == 1, "f30"); ok(bD == 31, "d31");
    #1 key = 40; #1 ok(bF == 1, "f40"); ok(bD == 41, "d41");
    #1 key = 50; #1 ok(bF == 1, "f50"); ok(bD == 51, "d51");
    #1 key = 60; #1 ok(bF == 1, "f60"); ok(bD == 61, "d61");
    #1 key = 70; #1 ok(bF == 1, "f70"); ok(bD == 71, "d71");
    #1 key = 80; #1 ok(bF == 1, "f80"); ok(bD == 81, "d81");

    address = 4;                                                                // Missing keys
    #1 key =  1; #1 ok(bF == 0, "f01");  ok(bD == 0, "d 1");
    #1 key =  2; #1 ok(bF == 0, "f02");  ok(bD == 0, "d 2");
    #1 key =  3; #1 ok(bF == 0, "f03");  ok(bD == 0, "d 3");
    #1 key =  4; #1 ok(bF == 0, "f04");  ok(bD == 0, "d 4");
    #1 key =  5; #1 ok(bF == 0, "f05");  ok(bD == 0, "d 5");
    #1 key =  6; #1 ok(bF == 0, "f06");  ok(bD == 0, "d 6");
    #1 key =  7; #1 ok(bF == 0, "f07");  ok(bD == 0, "d 7");
    #1 key =  8; #1 ok(bF == 0, "f08");  ok(bD == 0, "d 8");
    #1 key =  9; #1 ok(bF == 0, "f09");  ok(bD == 0, "d 9");
    #1 key = 11; #1 ok(bF == 0, "f11");  ok(bD == 0, "d11");
    #1 key = 21; #1 ok(bF == 0, "f21");  ok(bD == 0, "d21");
    #1 key = 31; #1 ok(bF == 0, "f31");  ok(bD == 0, "d31");
    #1 key = 41; #1 ok(bF == 0, "f41");  ok(bD == 0, "d41");
    #1 key = 51; #1 ok(bF == 0, "f51");  ok(bD == 0, "d51");
    #1 key = 61; #1 ok(bF == 0, "f61");  ok(bD == 0, "d61");
    #1 key = 71; #1 ok(bF == 0, "f71");  ok(bD == 0, "d71");
    #1 key = 81; #1 ok(bF == 0, "f81");  ok(bD == 0, "d81");
    checkAllTestsPassed(109);
  end
endmodule
